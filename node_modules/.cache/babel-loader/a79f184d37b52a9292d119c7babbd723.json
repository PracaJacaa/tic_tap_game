{"ast":null,"code":"var _jsxFileName = \"/workspace/tic_tap_game/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\"; //https://www.bing.com/search?q=function+calculateWinner(squares)+%7B+const+lines+%3D+%5B+%5B0%2C+1%2C+2%5D%2C+%5B3%2C+4%2C+5%5D%2C+%5B6%2C+7%2C+8%5D%2C+%5B0%2C+3%2C+6%5D%2C+%5B1%2C+4%2C+7%5D%2C+%5B2%2C+5%2C+8%5D%2C+%5B0%2C+4%2C+8%5D%2C+%5B2%2C+4%2C+6%5D%2C+%5D%3B+for+(let+i+%3D+0%3B+i+%3C+lines.length%3B+i%2B%2B)+%7B+const+%5Ba%2C+b%2C+c%5D+%3D+lines%5Bi%5D%3B+if+(squares%5Ba%5D+%26%26+squares%5Ba%5D+%3D%3D%3D+squares%5Bb%5D+%26%26+squares%5Ba%5D+%3D%3D%3D+squares%5Bc%5D)+%7B+return+squares%5Ba%5D%3B+%7D+%7D+return+null%3B+%7D&cvid=df1672d60d6b4ec69a6cf74919644157&aqs=edge..69i57.681j0j1&FORM=ANNTA1&PC=U531\n// https://github.com/itsrave/tictactoe-react/blob/01f696da87a86bf38befb571a81b0a8781b73568/src/index.js#L182\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => this.props.handleboxClick(),\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this) //later add some onchange \n    ;\n  }\n\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const RowBoxes = [0, 3, 6];\n    const RowArry = Array(3).fill(null); // const winner = this.Whowins(RowArry);\n    // let status;\n    // if(winner){\n    //     status = `Wygrywa ${winner}`;\n    // }else{\n    // }\n\n    return RowBoxes.map((RowBoxe, emptyindex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rowindex\",\n        children: RowArry.map((RowArr, anotherEmptyIndex) => {\n          let RowArrIndex = RowBoxe + anotherEmptyIndex;\n          return /*#__PURE__*/_jsxDEV(Square, {\n            value: this.props.RowArry[RowArrIndex],\n            handleboxClick: () => {\n              this.props.handleboxClick(RowArrIndex);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    //Life circle  pamięć odwołuje się do constructora \n    super(props);\n    this.state = {\n      RowArry: Array(9).fill(null),\n      nextSymbol: \"X\",\n      xIsNext: true\n    };\n    this.handleboxClick = this.handleboxClick.bind(this);\n  }\n  /*\n    handleClick(i) {\n  const squares = this.state.squares.slice();\n  if (calculateWinner(squares) || squares[i]) {\n    return;\n  }\n  squares[i] = this.state.xIsNext ? 'X' : 'O';\n  this.setState({\n    squares: squares,\n    xIsNext: !this.state.xIsNext,\n  });\n  }\n  */\n\n\n  handleboxClick(index) {\n    console.log(`User clicked ${index}`);\n    const RowArry = this.state.RowArry;\n    const winningCombination = this.Whowins(RowArry);\n\n    if (winningCombination) {\n      console.log(`Winning ${winningCombination}`);\n      return;\n    }\n\n    if (RowArry[index] !== null) {\n      return;\n    }\n\n    RowArry[index] = this.state.nextSymbol;\n    this.setState({\n      RowArry: RowArry,\n      nextSymbol: this.state.nextSymbol === \"X\" ? \"O\" : \"X\"\n    });\n  }\n\n  Whowins(RowArry) {\n    // Define winning combinations\n    const winninglines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]; // One on this winning combination is actually present in your grid\n    // and your grid is the RowArray\n\n    for (let index = 0; index < winninglines.length; index++) {\n      const [a, b, c] = winninglines[index];\n\n      if (RowArry[a] && RowArry[a] === RowArry[b] && RowArry[a] === RowArry[c]) {\n        return winninglines[index];\n      }\n    }\n\n    return null;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          handleboxClick: this.handleboxClick,\n          RowArry: this.state.RowArry\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 139,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/workspace/tic_tap_game/src/index.js"],"names":["React","ReactDOM","Square","Component","constructor","props","render","handleboxClick","value","Board","RowBoxes","RowArry","Array","fill","map","RowBoxe","emptyindex","RowArr","anotherEmptyIndex","RowArrIndex","Game","state","nextSymbol","xIsNext","bind","index","console","log","winningCombination","Whowins","setState","winninglines","length","a","b","c","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n//https://www.bing.com/search?q=function+calculateWinner(squares)+%7B+const+lines+%3D+%5B+%5B0%2C+1%2C+2%5D%2C+%5B3%2C+4%2C+5%5D%2C+%5B6%2C+7%2C+8%5D%2C+%5B0%2C+3%2C+6%5D%2C+%5B1%2C+4%2C+7%5D%2C+%5B2%2C+5%2C+8%5D%2C+%5B0%2C+4%2C+8%5D%2C+%5B2%2C+4%2C+6%5D%2C+%5D%3B+for+(let+i+%3D+0%3B+i+%3C+lines.length%3B+i%2B%2B)+%7B+const+%5Ba%2C+b%2C+c%5D+%3D+lines%5Bi%5D%3B+if+(squares%5Ba%5D+%26%26+squares%5Ba%5D+%3D%3D%3D+squares%5Bb%5D+%26%26+squares%5Ba%5D+%3D%3D%3D+squares%5Bc%5D)+%7B+return+squares%5Ba%5D%3B+%7D+%7D+return+null%3B+%7D&cvid=df1672d60d6b4ec69a6cf74919644157&aqs=edge..69i57.681j0j1&FORM=ANNTA1&PC=U531\n// https://github.com/itsrave/tictactoe-react/blob/01f696da87a86bf38befb571a81b0a8781b73568/src/index.js#L182\nclass Square extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <button  \n            onClick={() => this.props.handleboxClick()}>\n                {this.props.value}\n            </button>     //later add some onchange \n        );\n    }\n}\n\nclass Board extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    \n      \n    render(){\n\n        const RowBoxes = [0,3,6];\n        const RowArry = Array(3).fill(null);\n        // const winner = this.Whowins(RowArry);\n        // let status;\n        // if(winner){\n        //     status = `Wygrywa ${winner}`;\n        // }else{\n            \n        // }\n\n        return RowBoxes.map((RowBoxe, emptyindex) =>{\n            return(\n                <div className=\"rowindex\">\n                    {RowArry.map((RowArr,anotherEmptyIndex)=>{\n                        let RowArrIndex = RowBoxe + anotherEmptyIndex;\n                        return(\n                            <Square \n                            value={this.props.RowArry[RowArrIndex]}\n                            handleboxClick={() => {\n                                this.props.handleboxClick(RowArrIndex);\n                            }}\n                            />\n                        );\n                    })}\n                </div>\n                );\n        });\n    }\n}\n\nclass Game extends React.Component{\n    constructor(props){                 //Life circle  pamięć odwołuje się do constructora \n        super(props);\n        this.state = { \n            RowArry: Array(9).fill(null),\n            nextSymbol: \"X\",\n            xIsNext: true,\n        };\n    this.handleboxClick = this.handleboxClick.bind(this);\n    }\n    /*\n      handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n    */\n    handleboxClick(index,){\n        console.log(`User clicked ${index}`);\n        const RowArry = this.state.RowArry;\n        const winningCombination = this.Whowins(RowArry);\n        if (winningCombination) {\n            console.log(`Winning ${winningCombination}`);\n            return;\n        }\n\n        if (RowArry[index] !== null){\n            return;\n        }\n\n        RowArry[index]= this.state.nextSymbol;\n\n        this.setState({\n            RowArry: RowArry,\n            nextSymbol: this.state.nextSymbol === \"X\" ? \"O\" : \"X\",\n        });\n\n    }\n\n    Whowins(RowArry){\n        // Define winning combinations\n        const winninglines =[\n            [0, 1, 2],\n            [3, 4, 5],\n            [6, 7, 8],\n            [0, 3, 6],\n            [1, 4, 7],\n            [2, 5, 8],\n            [0, 4, 8],\n            [2, 4, 6],\n        ];\n        // One on this winning combination is actually present in your grid\n        // and your grid is the RowArray\n        for(let index =0;index<winninglines.length;index++){\n            const [a,b,c] = winninglines[index];\n            if(RowArry[a] && RowArry[a] === RowArry[b] && RowArry[a] === RowArry[c]){\n                return winninglines[index];\n            }\n        }\n        return null;\n    }\n\n    render(){\n        return(\n        <div className=\"game\">\n            <div className=\"board\">\n                <Board   \n                handleboxClick={this.handleboxClick}\n                RowArry={this.state.RowArry}\n                />\n            </div>\n        </div>\n        );\n    }\n}\n\nReactDOM.render(<Game/>, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}