{"ast":null,"code":"var _jsxFileName = \"/workspace/tic_tap_game/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => this.props.handleSquareClick(),\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const rowStartIndexes = [0, 3, 6];\n    const squares = Array(3).fill(null); // [null, null, ...]\n\n    return rowStartIndexes.map((rowStartIndex, arrIndex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: squares.map((square, placeHolderIndex) => {\n          let squareIndex = rowStartIndex + placeHolderIndex;\n          return /*#__PURE__*/_jsxDEV(Square, {\n            value: this.props.squares[squareIndex],\n            handleSquareClick: () => {\n              this.props.handleSquareClick(squareIndex);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      nextSymbol: \"X\"\n    };\n    this.handleSquareClick = this.handleSquareClick.bind(this);\n  }\n\n  handleSquareClick(index) {\n    console.log(`User clicked ${index}`);\n    const squares = this.state.squares;\n\n    if (squares[index] !== null) {\n      return;\n    }\n\n    squares[index] = this.state.nextSymbol;\n    this.setState({\n      squares: squares,\n      nextSymbol: this.state.nextSymbol === \"X\" ? \"O\" : \"X\"\n    });\n    /*\n      if(this.state.nextSymbol === \"X\") {\n        this.setState({nextSymbol: \"O\"});\n      } else {\n        this.setState({nextSymbol: \"X\"});\n      }\n    */\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          handleSquareClick: this.handleSquareClick,\n          squares: this.state.squares\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 95,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));\n/*import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass Square extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <button  \n            onClick={() => this.props.handleboxClick()}>\n                {this.props.value}\n            </button>     //later add some onchange \n        );\n    };\n}\n\nclass Board extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        const RowBoxes = [0,3,6];\n        const RowArry = Array(3).fill(null);\n        return RowBoxes.map(function(RowBoxes, emptyindex){\n            return(\n                <div className=\"rowindex\">\n                    {RowArry.map(function(RowArry,anotherEmptyIndex){\n                        let RowArryIndex = RowBoxes + anotherEmptyIndex;\n                        return(\n                            <Square \n                            value={this.RowArry[RowArryIndex]}\n                            handleboxClick={() => {\n                                this.props.handleboxClick(RowArryIndex);\n                            }}\n                            />\n                        );\n                    })}\n                </div>\n                );\n        });\n    \n    }\n}\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = { \n            RowArry: Array(9).fill(null),\n            nextSymbol: \"X\",\n        };\n    this.handleboxClick = this.handleboxClick.bind(this);\n\n    }\n\n    handleboxClick(index){\n        console.log(`User clicked ${index}`);\n        const RowArry = this.state.RowArry;\n        if (RowArry[index] !== null){\n            return;\n        }\n        RowArry[index]= this.state.nextSymbol;\n\n        this.setState({\n            RowArry: RowArry,\n            nextSymbol: this.state.nextSymbol === \"X\" ? \"O\" : \"X\",\n        });\n    }\n    render(){\n        return(\n        <div className=\"Game\">\n            <div className=\"Board\">\n                <Board   \n                handleboxClick={this.handleboxClick}\n                RowArry={this.state.RowArry}\n                />\n            </div>\n        </div>\n        );\n    }\n}\n\n\nReactDOM.render(<Game/>, document.getElementById(\"root\"));*/","map":{"version":3,"sources":["/workspace/tic_tap_game/src/index.js"],"names":["React","ReactDOM","Square","Component","constructor","props","render","handleSquareClick","value","Board","rowStartIndexes","squares","Array","fill","map","rowStartIndex","arrIndex","square","placeHolderIndex","squareIndex","Game","state","nextSymbol","bind","index","console","log","setState","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <button onClick={() => this.props.handleSquareClick()}>\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const rowStartIndexes = [0, 3, 6];\n    const squares = Array(3).fill(null); // [null, null, ...]\n\n    return rowStartIndexes.map((rowStartIndex, arrIndex) => {\n      return (\n        <div className=\"board-row\">\n          {squares.map((square, placeHolderIndex) => {\n            let squareIndex = rowStartIndex + placeHolderIndex;\n            return (\n              <Square\n                value={this.props.squares[squareIndex]}\n                handleSquareClick={() => {\n                  this.props.handleSquareClick(squareIndex);\n                }}\n              />\n            );\n          })}\n        </div>\n      );\n    });\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      nextSymbol: \"X\",\n    };\n    this.handleSquareClick = this.handleSquareClick.bind(this);\n  }\n\n  handleSquareClick(index) {\n    console.log(`User clicked ${index}`);\n    const squares = this.state.squares;\n\n    if (squares[index] !== null) {\n      return;\n    }\n\n    squares[index] = this.state.nextSymbol;\n\n    this.setState({\n      squares: squares,\n      nextSymbol: this.state.nextSymbol === \"X\" ? \"O\" : \"X\",\n    });\n\n    /*\n      if(this.state.nextSymbol === \"X\") {\n        this.setState({nextSymbol: \"O\"});\n      } else {\n        this.setState({nextSymbol: \"X\"});\n      }\n    */\n  }\n\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"board\">\n          <Board\n            handleSquareClick={this.handleSquareClick}\n            squares={this.state.squares}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n\n\n/*import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass Square extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <button  \n            onClick={() => this.props.handleboxClick()}>\n                {this.props.value}\n            </button>     //later add some onchange \n        );\n    };\n}\n\nclass Board extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        const RowBoxes = [0,3,6];\n        const RowArry = Array(3).fill(null);\n        return RowBoxes.map(function(RowBoxes, emptyindex){\n            return(\n                <div className=\"rowindex\">\n                    {RowArry.map(function(RowArry,anotherEmptyIndex){\n                        let RowArryIndex = RowBoxes + anotherEmptyIndex;\n                        return(\n                            <Square \n                            value={this.RowArry[RowArryIndex]}\n                            handleboxClick={() => {\n                                this.props.handleboxClick(RowArryIndex);\n                            }}\n                            />\n                        );\n                    })}\n                </div>\n                );\n        });\n    \n    }\n}\nclass Game extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = { \n            RowArry: Array(9).fill(null),\n            nextSymbol: \"X\",\n        };\n    this.handleboxClick = this.handleboxClick.bind(this);\n\n    }\n\n    handleboxClick(index){\n        console.log(`User clicked ${index}`);\n        const RowArry = this.state.RowArry;\n        if (RowArry[index] !== null){\n            return;\n        }\n        RowArry[index]= this.state.nextSymbol;\n\n        this.setState({\n            RowArry: RowArry,\n            nextSymbol: this.state.nextSymbol === \"X\" ? \"O\" : \"X\",\n        });\n    }\n    render(){\n        return(\n        <div className=\"Game\">\n            <div className=\"Board\">\n                <Board   \n                handleboxClick={this.handleboxClick}\n                RowArry={this.state.RowArry}\n                />\n            </div>\n        </div>\n        );\n    }\n}\n\n\nReactDOM.render(<Game/>, document.getElementById(\"root\"));*/\n"]},"metadata":{},"sourceType":"module"}