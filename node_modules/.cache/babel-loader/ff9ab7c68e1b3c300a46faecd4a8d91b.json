{"ast":null,"code":"var _jsxFileName = \"/workspace/tic_tap_game/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Square extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => this.props.handleboxClick(),\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this) //later add some onchange \n    ;\n  }\n\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const winner = this.Whowins(this.RowArry);\n    let status;\n\n    if (winner) {\n      status = `Wygrywa ${winner}`;\n    } else {}\n\n    const RowBoxes = [0, 3, 6];\n    const RowArry = Array(3).fill(null);\n    return RowBoxes.map((RowBoxe, emptyindex) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"rowindex\",\n        children: RowArry.map((RowArr, anotherEmptyIndex) => {\n          let RowArrIndex = RowBoxe + anotherEmptyIndex;\n          return /*#__PURE__*/_jsxDEV(Square, {\n            value: this.props.RowArry[RowArrIndex],\n            handleboxClick: () => {\n              this.props.handleboxClick(RowArrIndex);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this);\n    });\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    //Life circle  pamięć odwołuje się do constructora \n    super(props);\n    this.state = {\n      RowArry: Array(9).fill(null),\n      nextSymbol: \"X\"\n    };\n    this.handleboxClick = this.handleboxClick.bind(this);\n  }\n\n  handleboxClick(index) {\n    console.log(`User clicked ${index}`);\n    const RowArry = this.state.RowArry;\n\n    if (RowArry[index] !== null) {\n      return;\n    }\n\n    RowArry[index] = this.state.nextSymbol;\n    this.setState({\n      RowArry: RowArry,\n      nextSymbol: this.state.nextSymbol === \"X\" ? \"O\" : \"X\"\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          handleboxClick: this.handleboxClick,\n          RowArry: this.state.RowArry\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 95,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["/workspace/tic_tap_game/src/index.js"],"names":["React","ReactDOM","Square","Component","constructor","props","render","handleboxClick","value","Board","winner","Whowins","RowArry","status","RowBoxes","Array","fill","map","RowBoxe","emptyindex","RowArr","anotherEmptyIndex","RowArrIndex","Game","state","nextSymbol","bind","index","console","log","setState","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass Square extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        return(\n            <button  \n            onClick={() => this.props.handleboxClick()}>\n                {this.props.value}\n            </button>     //later add some onchange \n        );\n    }\n}\n\nclass Board extends React.Component{\n    constructor(props){\n        super(props);\n    }\n    render(){\n        const winner = this.Whowins(this.RowArry);\n        let status;\n        if(winner){\n            status = `Wygrywa ${winner}`;\n        }else{\n            \n        }\n        const RowBoxes = [0,3,6];\n        const RowArry = Array(3).fill(null);\n\n        return RowBoxes.map((RowBoxe, emptyindex) =>{\n            return(\n                <div className=\"rowindex\">\n                    {RowArry.map((RowArr,anotherEmptyIndex)=>{\n                        let RowArrIndex = RowBoxe + anotherEmptyIndex;\n                        return(\n                            <Square \n                            value={this.props.RowArry[RowArrIndex]}\n                            handleboxClick={() => {\n                                this.props.handleboxClick(RowArrIndex);\n                            }}\n                            />\n                        );\n                    })}\n                </div>\n                );\n        });\n    }\n    \n}\n\nclass Game extends React.Component{\n    constructor(props){                 //Life circle  pamięć odwołuje się do constructora \n        super(props);\n        this.state = { \n            RowArry: Array(9).fill(null),\n            nextSymbol: \"X\",\n        };\n    this.handleboxClick = this.handleboxClick.bind(this);\n    }\n\n    handleboxClick(index){\n        console.log(`User clicked ${index}`);\n        const RowArry = this.state.RowArry;\n\n        if (RowArry[index] !== null){\n            return;\n        }\n\n        RowArry[index]= this.state.nextSymbol;\n\n        this.setState({\n            RowArry: RowArry,\n            nextSymbol: this.state.nextSymbol === \"X\" ? \"O\" : \"X\",\n        });\n\n    }\n\n    render(){\n        return(\n        <div className=\"game\">\n            <div className=\"board\">\n                <Board   \n                handleboxClick={this.handleboxClick}\n                RowArry={this.state.RowArry}\n                />\n            </div>\n        </div>\n        );\n    }\n}\n\nReactDOM.render(<Game/>, document.getElementById(\"root\"));"]},"metadata":{},"sourceType":"module"}